template <int order> // order is 2 or...
class BandPass
{
  private:
    float a[order+1];
    float b[order+1];
    float omega0;
    float Q;
    float domega;
    float dt;
    bool adapt;
    float tn1 = 0;
    float x[order+1]; // Raw values
    float y[order+1]; // Filtered values

  public:  
    BandPass(float f0, float fw, float fs, bool adaptive){
      // f0: central frequency (Hz)
      // fw: bandpass width (Hz)
      // fs: sample frequency (Hz)
      // adaptive: boolean flag, if set to 1, the code will automatically set
      // the sample frequency based on the time history.
      omega0 = 6.28318530718*f0;
      domega = 6.28318530718*fw;
      Q = omega0/domega;
      dt = 1.0/fs;
      adapt = adaptive;
      tn1 = -dt;
      for(int k = 0; k < order+1; k++){
        x[k] = 0;
        y[k] = 0;      
        a[k] = 0;
        b[k] = 0;  
      }
      setCoef();
    }

    void setCoef(){
      if(adapt){
        float t = micros()/1.0e6;
        dt = t - tn1;
        tn1 = t;
      }
      float alpha = omega0*dt;
      if(order==2){
        float D = pow(alpha,2) + 2*alpha/Q + 4;
        b[0] = 2*alpha/(Q*D);
        b[1] = 0;
        b[2] = -b[0];
        a[0] = 0;
        a[1] = -(2*pow(alpha,2) - 8)/D;
        a[2] = -(pow(alpha,2) - 2*alpha/Q + 4)/D;  
      }
      else if(order==4){

      }
    }
    float filt(float xn){
      // Provide me with the current raw value: x
      // I will give you the current filtered value: y
      if(adapt){
        setCoef(); // Update coefficients if necessary      
      }
      y[0] = 0;
      x[0] = xn;
      // Compute the filtered values
      for(int k = 0; k < order+1; k++){
        y[0] += a[k]*y[k] + b[k]*x[k];
      }

      // Save the historical values
      for(int k = order; k > 0; k--){
        y[k] = y[k-1];
        x[k] = x[k-1];
      }
 
      // Return the filtered value    
      return y[0];
    }
};

// Filter instance
BandPass<2> lp(5,5,970,true);

const int threshold = 1;  // Threshold value for detecting peaks
const int minPeakDistance = 200;  // Minimum distance between peaks in milliseconds

unsigned long lastPeakTime = 0;
unsigned long startTime = 0;
int peakCount = 0;
const int interval = 10000;  // Time interval in milliseconds for BPM calculation (10 seconds)

void setup() {
  Serial.begin(9600);
  startTime = millis();
}

void loop() {
  // read the input on analog pin 0:
  int sensorValue = analogRead(A0);
  // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V):
  float voltage = sensorValue * (5.0 / 1023.0);
  float ampVol = voltage * 30;

  float yn = lp.filt(ampVol);

  // Peak detection logic
  if (yn > threshold && yn < 4) {
    unsigned long currentTime = millis();
   
    if (currentTime - lastPeakTime > minPeakDistance) {
      lastPeakTime = currentTime;
      peakCount++;
      Serial.println("Heartbeat detected");
    }
  }

  // Calculate BPM
  unsigned long elapsedTime = millis() - startTime;
  if (elapsedTime >= interval) {
    // Calculate BPM extrapolated to 60 seconds
    int bpm = (peakCount * 60000) / elapsedTime;
    Serial.print("BPM: ");
    Serial.println(bpm);
    // Reset the count and timer for the next interval
    peakCount = 0;
    startTime = millis();
  }

  // Output
  Serial.print(yn);
  Serial.println();

  delay(10); // Small delay to stabilize the reading
}

